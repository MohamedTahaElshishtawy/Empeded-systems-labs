
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000564  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063d  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021e  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000472  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a6  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8b 02 	call	0x516	; 0x516 <main>
  8a:	0c 94 b0 02 	jmp	0x560	; 0x560 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
#include "std_macros.h"
#include <avr/io.h>

void DIO_vsetPINDir(unsigned char portname , unsigned char pinnumber , unsigned char direction)
{
	switch(portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPINDir+0x6>
  96:	70 c0       	rjmp	.+224    	; 0x178 <DIO_vsetPINDir+0xe6>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetPINDir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	91 f1       	breq	.+100    	; 0x104 <DIO_vsetPINDir+0x72>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetPINDir+0x14>
  a4:	4c c0       	rjmp	.+152    	; 0x13e <DIO_vsetPINDir+0xac>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetPINDir+0x1a>
  aa:	82 c0       	rjmp	.+260    	; 0x1b0 <DIO_vsetPINDir+0x11e>
  ac:	0e c0       	rjmp	.+28     	; 0xca <DIO_vsetPINDir+0x38>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	49 f1       	breq	.+82     	; 0x104 <DIO_vsetPINDir+0x72>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetPINDir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPINDir+0x2a>
  ba:	7a c0       	rjmp	.+244    	; 0x1b0 <DIO_vsetPINDir+0x11e>
  bc:	06 c0       	rjmp	.+12     	; 0xca <DIO_vsetPINDir+0x38>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	f1 f1       	breq	.+124    	; 0x13e <DIO_vsetPINDir+0xac>
  c2:	84 36       	cpi	r24, 0x64	; 100
  c4:	09 f0       	breq	.+2      	; 0xc8 <DIO_vsetPINDir+0x36>
  c6:	74 c0       	rjmp	.+232    	; 0x1b0 <DIO_vsetPINDir+0x11e>
  c8:	57 c0       	rjmp	.+174    	; 0x178 <DIO_vsetPINDir+0xe6>
	{
		case 'A':
		case 'a':
		{
			if(direction == 1)
  ca:	41 30       	cpi	r20, 0x01	; 1
  cc:	69 f4       	brne	.+26     	; 0xe8 <DIO_vsetPINDir+0x56>
			{
				SET_BIT(DDRA,pinnumber);
  ce:	4a b3       	in	r20, 0x1a	; 26
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	c9 01       	movw	r24, r18
  d6:	06 2e       	mov	r0, r22
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPINDir+0x4c>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPINDir+0x48>
  e2:	84 2b       	or	r24, r20
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	10 c0       	rjmp	.+32     	; 0x108 <DIO_vsetPINDir+0x76>
			}
			else
			{
				CLR_BIT(DDRA,pinnumber);
  e8:	4a b3       	in	r20, 0x1a	; 26
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	c9 01       	movw	r24, r18
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPINDir+0x66>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPINDir+0x62>
  fc:	80 95       	com	r24
  fe:	84 23       	and	r24, r20
 100:	8a bb       	out	0x1a, r24	; 26
 102:	0f c0       	rjmp	.+30     	; 0x122 <DIO_vsetPINDir+0x90>

		}
		case 'B':
		case 'b':
		{
			if(direction == 1)
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	69 f4       	brne	.+26     	; 0x122 <DIO_vsetPINDir+0x90>
			{
				SET_BIT(DDRB,pinnumber);
 108:	47 b3       	in	r20, 0x17	; 23
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	c9 01       	movw	r24, r18
 110:	06 2e       	mov	r0, r22
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPINDir+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPINDir+0x82>
 11c:	84 2b       	or	r24, r20
 11e:	87 bb       	out	0x17, r24	; 23
 120:	10 c0       	rjmp	.+32     	; 0x142 <DIO_vsetPINDir+0xb0>
			}
			else
			{
				CLR_BIT(DDRB,pinnumber);
 122:	47 b3       	in	r20, 0x17	; 23
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	c9 01       	movw	r24, r18
 12a:	06 2e       	mov	r0, r22
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPINDir+0xa0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPINDir+0x9c>
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	87 bb       	out	0x17, r24	; 23
 13c:	0f c0       	rjmp	.+30     	; 0x15c <DIO_vsetPINDir+0xca>

		}
		case 'C':
		case 'c':
		{
			if(direction == 1)
 13e:	41 30       	cpi	r20, 0x01	; 1
 140:	69 f4       	brne	.+26     	; 0x15c <DIO_vsetPINDir+0xca>
			{
				SET_BIT(DDRC,pinnumber);
 142:	44 b3       	in	r20, 0x14	; 20
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	c9 01       	movw	r24, r18
 14a:	06 2e       	mov	r0, r22
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPINDir+0xc0>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPINDir+0xbc>
 156:	84 2b       	or	r24, r20
 158:	84 bb       	out	0x14, r24	; 20
 15a:	10 c0       	rjmp	.+32     	; 0x17c <DIO_vsetPINDir+0xea>
			}
			else
			{
				CLR_BIT(DDRC,pinnumber);
 15c:	44 b3       	in	r20, 0x14	; 20
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	c9 01       	movw	r24, r18
 164:	06 2e       	mov	r0, r22
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPINDir+0xda>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPINDir+0xd6>
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	84 bb       	out	0x14, r24	; 20
 176:	0f c0       	rjmp	.+30     	; 0x196 <DIO_vsetPINDir+0x104>

		}
		case 'D':
		case 'd':
		{
			if(direction == 1)
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	69 f4       	brne	.+26     	; 0x196 <DIO_vsetPINDir+0x104>
			{
				SET_BIT(DDRD,pinnumber);
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	62 2b       	or	r22, r18
 192:	61 bb       	out	0x11, r22	; 17
 194:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,pinnumber);
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	ac 01       	movw	r20, r24
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_vsetPINDir+0x112>
 1a0:	44 0f       	add	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_vsetPINDir+0x10e>
 1a8:	ba 01       	movw	r22, r20
 1aa:	60 95       	com	r22
 1ac:	62 23       	and	r22, r18
 1ae:	61 bb       	out	0x11, r22	; 17
 1b0:	08 95       	ret

000001b2 <DIO_vsetPINVal>:
		break;
	}
}
void DIO_vsetPINVal(unsigned char portname , unsigned char pinnumber , unsigned char pin_voltage)
{
	switch(portname)
 1b2:	84 34       	cpi	r24, 0x44	; 68
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_vsetPINVal+0x6>
 1b6:	70 c0       	rjmp	.+224    	; 0x298 <DIO_vsetPINVal+0xe6>
 1b8:	85 34       	cpi	r24, 0x45	; 69
 1ba:	48 f4       	brcc	.+18     	; 0x1ce <DIO_vsetPINVal+0x1c>
 1bc:	82 34       	cpi	r24, 0x42	; 66
 1be:	91 f1       	breq	.+100    	; 0x224 <DIO_vsetPINVal+0x72>
 1c0:	83 34       	cpi	r24, 0x43	; 67
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <DIO_vsetPINVal+0x14>
 1c4:	4c c0       	rjmp	.+152    	; 0x25e <DIO_vsetPINVal+0xac>
 1c6:	81 34       	cpi	r24, 0x41	; 65
 1c8:	09 f0       	breq	.+2      	; 0x1cc <DIO_vsetPINVal+0x1a>
 1ca:	82 c0       	rjmp	.+260    	; 0x2d0 <DIO_vsetPINVal+0x11e>
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <DIO_vsetPINVal+0x38>
 1ce:	82 36       	cpi	r24, 0x62	; 98
 1d0:	49 f1       	breq	.+82     	; 0x224 <DIO_vsetPINVal+0x72>
 1d2:	83 36       	cpi	r24, 0x63	; 99
 1d4:	20 f4       	brcc	.+8      	; 0x1de <DIO_vsetPINVal+0x2c>
 1d6:	81 36       	cpi	r24, 0x61	; 97
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_vsetPINVal+0x2a>
 1da:	7a c0       	rjmp	.+244    	; 0x2d0 <DIO_vsetPINVal+0x11e>
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <DIO_vsetPINVal+0x38>
 1de:	83 36       	cpi	r24, 0x63	; 99
 1e0:	f1 f1       	breq	.+124    	; 0x25e <DIO_vsetPINVal+0xac>
 1e2:	84 36       	cpi	r24, 0x64	; 100
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <DIO_vsetPINVal+0x36>
 1e6:	74 c0       	rjmp	.+232    	; 0x2d0 <DIO_vsetPINVal+0x11e>
 1e8:	57 c0       	rjmp	.+174    	; 0x298 <DIO_vsetPINVal+0xe6>
	{
		case 'A':
		case 'a':
		{
			if(pin_voltage == 1)
 1ea:	41 30       	cpi	r20, 0x01	; 1
 1ec:	69 f4       	brne	.+26     	; 0x208 <DIO_vsetPINVal+0x56>
			{
				SET_BIT(PORTA,pinnumber);
 1ee:	4b b3       	in	r20, 0x1b	; 27
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	c9 01       	movw	r24, r18
 1f6:	06 2e       	mov	r0, r22
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_vsetPINVal+0x4c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_vsetPINVal+0x48>
 202:	84 2b       	or	r24, r20
 204:	8b bb       	out	0x1b, r24	; 27
 206:	10 c0       	rjmp	.+32     	; 0x228 <DIO_vsetPINVal+0x76>
			}
			else
			{
				CLR_BIT(PORTA,pinnumber);
 208:	4b b3       	in	r20, 0x1b	; 27
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	c9 01       	movw	r24, r18
 210:	06 2e       	mov	r0, r22
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vsetPINVal+0x66>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vsetPINVal+0x62>
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8b bb       	out	0x1b, r24	; 27
 222:	0f c0       	rjmp	.+30     	; 0x242 <DIO_vsetPINVal+0x90>

		}
		case 'B':
		case 'b':
		{
			if(pin_voltage == 1)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	69 f4       	brne	.+26     	; 0x242 <DIO_vsetPINVal+0x90>
			{
				SET_BIT(PORTB,pinnumber);
 228:	48 b3       	in	r20, 0x18	; 24
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	c9 01       	movw	r24, r18
 230:	06 2e       	mov	r0, r22
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_vsetPINVal+0x86>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_vsetPINVal+0x82>
 23c:	84 2b       	or	r24, r20
 23e:	88 bb       	out	0x18, r24	; 24
 240:	10 c0       	rjmp	.+32     	; 0x262 <DIO_vsetPINVal+0xb0>
			}
			else
			{
				CLR_BIT(PORTB,pinnumber);
 242:	48 b3       	in	r20, 0x18	; 24
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	c9 01       	movw	r24, r18
 24a:	06 2e       	mov	r0, r22
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_vsetPINVal+0xa0>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_vsetPINVal+0x9c>
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	0f c0       	rjmp	.+30     	; 0x27c <DIO_vsetPINVal+0xca>

		}
		case 'C':
		case 'c':
		{
			if(pin_voltage == 1)
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_vsetPINVal+0xca>
			{
				SET_BIT(PORTC,pinnumber);
 262:	45 b3       	in	r20, 0x15	; 21
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	c9 01       	movw	r24, r18
 26a:	06 2e       	mov	r0, r22
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_vsetPINVal+0xc0>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_vsetPINVal+0xbc>
 276:	84 2b       	or	r24, r20
 278:	85 bb       	out	0x15, r24	; 21
 27a:	10 c0       	rjmp	.+32     	; 0x29c <DIO_vsetPINVal+0xea>
			}
			else
			{
				CLR_BIT(PORTC,pinnumber);
 27c:	45 b3       	in	r20, 0x15	; 21
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	c9 01       	movw	r24, r18
 284:	06 2e       	mov	r0, r22
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_vsetPINVal+0xda>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_vsetPINVal+0xd6>
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	85 bb       	out	0x15, r24	; 21
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <DIO_vsetPINVal+0x104>

		}
		case 'D':
		case 'd':
		{
			if(pin_voltage == 1)
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	69 f4       	brne	.+26     	; 0x2b6 <DIO_vsetPINVal+0x104>
			{
				SET_BIT(PORTD,pinnumber);
 29c:	22 b3       	in	r18, 0x12	; 18
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_vsetPINVal+0xf8>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_vsetPINVal+0xf4>
 2ae:	ba 01       	movw	r22, r20
 2b0:	62 2b       	or	r22, r18
 2b2:	62 bb       	out	0x12, r22	; 18
 2b4:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,pinnumber);
 2b6:	22 b3       	in	r18, 0x12	; 18
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	ac 01       	movw	r20, r24
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_vsetPINVal+0x112>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_vsetPINVal+0x10e>
 2c8:	ba 01       	movw	r22, r20
 2ca:	60 95       	com	r22
 2cc:	62 23       	and	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret

000002d2 <DIO_vtogPIN>:
		break;
	}
}
void DIO_vtogPIN(unsigned char portname , unsigned char pinnumber)
{
	switch(portname)
 2d2:	84 34       	cpi	r24, 0x44	; 68
 2d4:	c9 f1       	breq	.+114    	; 0x348 <DIO_vtogPIN+0x76>
 2d6:	85 34       	cpi	r24, 0x45	; 69
 2d8:	38 f4       	brcc	.+14     	; 0x2e8 <DIO_vtogPIN+0x16>
 2da:	82 34       	cpi	r24, 0x42	; 66
 2dc:	e9 f0       	breq	.+58     	; 0x318 <DIO_vtogPIN+0x46>
 2de:	83 34       	cpi	r24, 0x43	; 67
 2e0:	38 f5       	brcc	.+78     	; 0x330 <DIO_vtogPIN+0x5e>
 2e2:	81 34       	cpi	r24, 0x41	; 65
 2e4:	e9 f5       	brne	.+122    	; 0x360 <DIO_vtogPIN+0x8e>
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <DIO_vtogPIN+0x2e>
 2e8:	82 36       	cpi	r24, 0x62	; 98
 2ea:	b1 f0       	breq	.+44     	; 0x318 <DIO_vtogPIN+0x46>
 2ec:	83 36       	cpi	r24, 0x63	; 99
 2ee:	18 f4       	brcc	.+6      	; 0x2f6 <DIO_vtogPIN+0x24>
 2f0:	81 36       	cpi	r24, 0x61	; 97
 2f2:	b1 f5       	brne	.+108    	; 0x360 <DIO_vtogPIN+0x8e>
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <DIO_vtogPIN+0x2e>
 2f6:	83 36       	cpi	r24, 0x63	; 99
 2f8:	d9 f0       	breq	.+54     	; 0x330 <DIO_vtogPIN+0x5e>
 2fa:	84 36       	cpi	r24, 0x64	; 100
 2fc:	89 f5       	brne	.+98     	; 0x360 <DIO_vtogPIN+0x8e>
 2fe:	24 c0       	rjmp	.+72     	; 0x348 <DIO_vtogPIN+0x76>
	{
		case 'A':
		case 'a':
		{
			TOG_BIT(PORTA,pinnumber);
 300:	4b b3       	in	r20, 0x1b	; 27
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	c9 01       	movw	r24, r18
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_vtogPIN+0x3e>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_vtogPIN+0x3a>
 314:	84 27       	eor	r24, r20
 316:	8b bb       	out	0x1b, r24	; 27
		}
		case 'B':
		case 'b':
		{
			TOG_BIT(PORTB,pinnumber);
 318:	48 b3       	in	r20, 0x18	; 24
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	c9 01       	movw	r24, r18
 320:	06 2e       	mov	r0, r22
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_vtogPIN+0x56>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_vtogPIN+0x52>
 32c:	84 27       	eor	r24, r20
 32e:	88 bb       	out	0x18, r24	; 24

		}
		case 'C':
		case 'c':
		{
			TOG_BIT(PORTC,pinnumber);
 330:	45 b3       	in	r20, 0x15	; 21
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	c9 01       	movw	r24, r18
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_vtogPIN+0x6e>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_vtogPIN+0x6a>
 344:	84 27       	eor	r24, r20
 346:	85 bb       	out	0x15, r24	; 21

		}
		case 'D':
		case 'd':
		{
			TOG_BIT(PORTD,pinnumber);
 348:	22 b3       	in	r18, 0x12	; 18
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_vtogPIN+0x84>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_vtogPIN+0x80>
 35a:	ba 01       	movw	r22, r20
 35c:	62 27       	eor	r22, r18
 35e:	62 bb       	out	0x12, r22	; 18
 360:	08 95       	ret

00000362 <DIO_u8read>:
	}
}
unsigned char DIO_u8read(unsigned char portname , unsigned char pinnumber)
{
	unsigned char val;
	switch(portname)
 362:	84 34       	cpi	r24, 0x44	; 68
 364:	d9 f0       	breq	.+54     	; 0x39c <DIO_u8read+0x3a>
 366:	85 34       	cpi	r24, 0x45	; 69
 368:	38 f4       	brcc	.+14     	; 0x378 <DIO_u8read+0x16>
 36a:	82 34       	cpi	r24, 0x42	; 66
 36c:	99 f0       	breq	.+38     	; 0x394 <DIO_u8read+0x32>
 36e:	83 34       	cpi	r24, 0x43	; 67
 370:	98 f4       	brcc	.+38     	; 0x398 <DIO_u8read+0x36>
 372:	81 34       	cpi	r24, 0x41	; 65
 374:	39 f5       	brne	.+78     	; 0x3c4 <DIO_u8read+0x62>
 376:	0c c0       	rjmp	.+24     	; 0x390 <DIO_u8read+0x2e>
 378:	82 36       	cpi	r24, 0x62	; 98
 37a:	61 f0       	breq	.+24     	; 0x394 <DIO_u8read+0x32>
 37c:	83 36       	cpi	r24, 0x63	; 99
 37e:	18 f4       	brcc	.+6      	; 0x386 <DIO_u8read+0x24>
 380:	81 36       	cpi	r24, 0x61	; 97
 382:	01 f5       	brne	.+64     	; 0x3c4 <DIO_u8read+0x62>
 384:	05 c0       	rjmp	.+10     	; 0x390 <DIO_u8read+0x2e>
 386:	83 36       	cpi	r24, 0x63	; 99
 388:	39 f0       	breq	.+14     	; 0x398 <DIO_u8read+0x36>
 38a:	84 36       	cpi	r24, 0x64	; 100
 38c:	d9 f4       	brne	.+54     	; 0x3c4 <DIO_u8read+0x62>
 38e:	06 c0       	rjmp	.+12     	; 0x39c <DIO_u8read+0x3a>
	{
		case 'A':
		case 'a':
		{
			val = READ_BIT(PINA,pinnumber);
 390:	89 b3       	in	r24, 0x19	; 25
 392:	89 b3       	in	r24, 0x19	; 25
		}
		case 'B':
		case 'b':
		{
			val = READ_BIT(PINB,pinnumber);
 394:	86 b3       	in	r24, 0x16	; 22
 396:	86 b3       	in	r24, 0x16	; 22

		}
		case 'C':
		case 'c':
		{
			val = READ_BIT(PINC,pinnumber);
 398:	83 b3       	in	r24, 0x13	; 19
 39a:	83 b3       	in	r24, 0x13	; 19

		}
		case 'D':
		case 'd':
		{
			val = READ_BIT(PIND,pinnumber);
 39c:	20 b3       	in	r18, 0x10	; 16
 39e:	80 b3       	in	r24, 0x10	; 16
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	fa 01       	movw	r30, r20
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_u8read+0x4a>
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_u8read+0x46>
 3b0:	cf 01       	movw	r24, r30
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	82 23       	and	r24, r18
 3b6:	93 23       	and	r25, r19
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_u8read+0x5c>
 3ba:	95 95       	asr	r25
 3bc:	87 95       	ror	r24
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_u8read+0x58>
 3c2:	98 2f       	mov	r25, r24
		default:
		break;
	}
	return val;
	
}
 3c4:	89 2f       	mov	r24, r25
 3c6:	08 95       	ret

000003c8 <DIO_set_port_direction>:

void DIO_set_port_direction(unsigned char portname , unsigned char direction)
{
	switch(portname)
 3c8:	84 34       	cpi	r24, 0x44	; 68
 3ca:	51 f1       	breq	.+84     	; 0x420 <DIO_set_port_direction+0x58>
 3cc:	85 34       	cpi	r24, 0x45	; 69
 3ce:	38 f4       	brcc	.+14     	; 0x3de <DIO_set_port_direction+0x16>
 3d0:	82 34       	cpi	r24, 0x42	; 66
 3d2:	c1 f0       	breq	.+48     	; 0x404 <DIO_set_port_direction+0x3c>
 3d4:	83 34       	cpi	r24, 0x43	; 67
 3d6:	e8 f4       	brcc	.+58     	; 0x412 <DIO_set_port_direction+0x4a>
 3d8:	81 34       	cpi	r24, 0x41	; 65
 3da:	41 f5       	brne	.+80     	; 0x42c <DIO_set_port_direction+0x64>
 3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <DIO_set_port_direction+0x2e>
 3de:	82 36       	cpi	r24, 0x62	; 98
 3e0:	89 f0       	breq	.+34     	; 0x404 <DIO_set_port_direction+0x3c>
 3e2:	83 36       	cpi	r24, 0x63	; 99
 3e4:	18 f4       	brcc	.+6      	; 0x3ec <DIO_set_port_direction+0x24>
 3e6:	81 36       	cpi	r24, 0x61	; 97
 3e8:	09 f5       	brne	.+66     	; 0x42c <DIO_set_port_direction+0x64>
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <DIO_set_port_direction+0x2e>
 3ec:	83 36       	cpi	r24, 0x63	; 99
 3ee:	89 f0       	breq	.+34     	; 0x412 <DIO_set_port_direction+0x4a>
 3f0:	84 36       	cpi	r24, 0x64	; 100
 3f2:	e1 f4       	brne	.+56     	; 0x42c <DIO_set_port_direction+0x64>
 3f4:	15 c0       	rjmp	.+42     	; 0x420 <DIO_set_port_direction+0x58>
	{
		case 'A':
		case 'a':
		{
			if(direction == 1)
 3f6:	61 30       	cpi	r22, 0x01	; 1
 3f8:	19 f4       	brne	.+6      	; 0x400 <DIO_set_port_direction+0x38>
			{
				DDRA=0xFF;
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	8a bb       	out	0x1a, r24	; 26
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <DIO_set_port_direction+0x40>
			}
			else
			{
				DDRA=0x00;
 400:	1a ba       	out	0x1a, r1	; 26
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_set_port_direction+0x46>

		}
		case 'B':
		case 'b':
		{
			if(direction == 1)
 404:	61 30       	cpi	r22, 0x01	; 1
 406:	19 f4       	brne	.+6      	; 0x40e <DIO_set_port_direction+0x46>
			{
				DDRB=0xFF;
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	87 bb       	out	0x17, r24	; 23
 40c:	04 c0       	rjmp	.+8      	; 0x416 <DIO_set_port_direction+0x4e>
			}
			else
			{
				DDRB=0x00;
 40e:	17 ba       	out	0x17, r1	; 23
 410:	05 c0       	rjmp	.+10     	; 0x41c <DIO_set_port_direction+0x54>

		}
		case 'C':
		case 'c':
		{
			if(direction == 1)
 412:	61 30       	cpi	r22, 0x01	; 1
 414:	19 f4       	brne	.+6      	; 0x41c <DIO_set_port_direction+0x54>
			{
				DDRC=0xFF;
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	84 bb       	out	0x14, r24	; 20
 41a:	04 c0       	rjmp	.+8      	; 0x424 <DIO_set_port_direction+0x5c>
			}
			else
			{
				DDRC=0x00;
 41c:	14 ba       	out	0x14, r1	; 20
 41e:	05 c0       	rjmp	.+10     	; 0x42a <DIO_set_port_direction+0x62>

		}
		case 'D':
		case 'd':
		{
			if(direction == 1)
 420:	61 30       	cpi	r22, 0x01	; 1
 422:	19 f4       	brne	.+6      	; 0x42a <DIO_set_port_direction+0x62>
			{
				DDRD=0xFF;
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	81 bb       	out	0x11, r24	; 17
 428:	08 95       	ret
			}
			else
			{
				DDRD=0x00;
 42a:	11 ba       	out	0x11, r1	; 17
 42c:	08 95       	ret

0000042e <DIO_write_port>:
		break;
	}
}
void DIO_write_port(unsigned char portname , unsigned char port_voltage) 
{
	switch(portname)
 42e:	84 34       	cpi	r24, 0x44	; 68
 430:	51 f1       	breq	.+84     	; 0x486 <DIO_write_port+0x58>
 432:	85 34       	cpi	r24, 0x45	; 69
 434:	38 f4       	brcc	.+14     	; 0x444 <DIO_write_port+0x16>
 436:	82 34       	cpi	r24, 0x42	; 66
 438:	c1 f0       	breq	.+48     	; 0x46a <DIO_write_port+0x3c>
 43a:	83 34       	cpi	r24, 0x43	; 67
 43c:	e8 f4       	brcc	.+58     	; 0x478 <DIO_write_port+0x4a>
 43e:	81 34       	cpi	r24, 0x41	; 65
 440:	41 f5       	brne	.+80     	; 0x492 <DIO_write_port+0x64>
 442:	0c c0       	rjmp	.+24     	; 0x45c <DIO_write_port+0x2e>
 444:	82 36       	cpi	r24, 0x62	; 98
 446:	89 f0       	breq	.+34     	; 0x46a <DIO_write_port+0x3c>
 448:	83 36       	cpi	r24, 0x63	; 99
 44a:	18 f4       	brcc	.+6      	; 0x452 <DIO_write_port+0x24>
 44c:	81 36       	cpi	r24, 0x61	; 97
 44e:	09 f5       	brne	.+66     	; 0x492 <DIO_write_port+0x64>
 450:	05 c0       	rjmp	.+10     	; 0x45c <DIO_write_port+0x2e>
 452:	83 36       	cpi	r24, 0x63	; 99
 454:	89 f0       	breq	.+34     	; 0x478 <DIO_write_port+0x4a>
 456:	84 36       	cpi	r24, 0x64	; 100
 458:	e1 f4       	brne	.+56     	; 0x492 <DIO_write_port+0x64>
 45a:	15 c0       	rjmp	.+42     	; 0x486 <DIO_write_port+0x58>
	{
		case 'A':
		case 'a':
		{
			if(port_voltage == 1)
 45c:	61 30       	cpi	r22, 0x01	; 1
 45e:	19 f4       	brne	.+6      	; 0x466 <DIO_write_port+0x38>
			{
				PORTA = 0xFF;
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	8b bb       	out	0x1b, r24	; 27
 464:	04 c0       	rjmp	.+8      	; 0x46e <DIO_write_port+0x40>
			}
			else
			{
				PORTA = 0x00;
 466:	1b ba       	out	0x1b, r1	; 27
 468:	04 c0       	rjmp	.+8      	; 0x472 <DIO_write_port+0x44>

		}
		case 'B':
		case 'b':
		{
			if(port_voltage == 1)
 46a:	61 30       	cpi	r22, 0x01	; 1
 46c:	11 f4       	brne	.+4      	; 0x472 <DIO_write_port+0x44>
			{
				PORTB = 0x00;
 46e:	18 ba       	out	0x18, r1	; 24
 470:	05 c0       	rjmp	.+10     	; 0x47c <DIO_write_port+0x4e>
			}
			else
			{
				PORTB = 0xFF;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	88 bb       	out	0x18, r24	; 24
 476:	05 c0       	rjmp	.+10     	; 0x482 <DIO_write_port+0x54>

		}
		case 'C':
		case 'c':
		{
			if(port_voltage == 1)
 478:	61 30       	cpi	r22, 0x01	; 1
 47a:	19 f4       	brne	.+6      	; 0x482 <DIO_write_port+0x54>
			{
				PORTC = 0xFF;
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	85 bb       	out	0x15, r24	; 21
 480:	04 c0       	rjmp	.+8      	; 0x48a <DIO_write_port+0x5c>
			}
			else
			{
				PORTC = 0x00;
 482:	15 ba       	out	0x15, r1	; 21
 484:	05 c0       	rjmp	.+10     	; 0x490 <DIO_write_port+0x62>

		}
		case 'D':
		case 'd':
		{
			if(port_voltage == 1)
 486:	61 30       	cpi	r22, 0x01	; 1
 488:	19 f4       	brne	.+6      	; 0x490 <DIO_write_port+0x62>
			{
				PORTD = 0xFF;
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	82 bb       	out	0x12, r24	; 18
 48e:	08 95       	ret
			}
			else
			{
				PORTD = 0x00;
 490:	12 ba       	out	0x12, r1	; 18
 492:	08 95       	ret

00000494 <DIO_port_read>:
	}
}
unsigned char DIO_port_read(unsigned char portname)
{
	unsigned char val;
	switch(portname)
 494:	84 34       	cpi	r24, 0x44	; 68
 496:	c1 f0       	breq	.+48     	; 0x4c8 <DIO_port_read+0x34>
 498:	85 34       	cpi	r24, 0x45	; 69
 49a:	38 f4       	brcc	.+14     	; 0x4aa <DIO_port_read+0x16>
 49c:	82 34       	cpi	r24, 0x42	; 66
 49e:	91 f0       	breq	.+36     	; 0x4c4 <DIO_port_read+0x30>
 4a0:	83 34       	cpi	r24, 0x43	; 67
 4a2:	88 f4       	brcc	.+34     	; 0x4c6 <DIO_port_read+0x32>
 4a4:	81 34       	cpi	r24, 0x41	; 65
 4a6:	89 f4       	brne	.+34     	; 0x4ca <DIO_port_read+0x36>
 4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <DIO_port_read+0x2e>
 4aa:	82 36       	cpi	r24, 0x62	; 98
 4ac:	59 f0       	breq	.+22     	; 0x4c4 <DIO_port_read+0x30>
 4ae:	83 36       	cpi	r24, 0x63	; 99
 4b0:	18 f4       	brcc	.+6      	; 0x4b8 <DIO_port_read+0x24>
 4b2:	81 36       	cpi	r24, 0x61	; 97
 4b4:	51 f4       	brne	.+20     	; 0x4ca <DIO_port_read+0x36>
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <DIO_port_read+0x2e>
 4b8:	83 36       	cpi	r24, 0x63	; 99
 4ba:	29 f0       	breq	.+10     	; 0x4c6 <DIO_port_read+0x32>
 4bc:	84 36       	cpi	r24, 0x64	; 100
 4be:	29 f4       	brne	.+10     	; 0x4ca <DIO_port_read+0x36>
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <DIO_port_read+0x34>
	{
		case 'A':
		case 'a':
		{
			val = PINA;
 4c2:	89 b3       	in	r24, 0x19	; 25
		}
		case 'B':
		case 'b':
		{
			val = PINB;
 4c4:	86 b3       	in	r24, 0x16	; 22

		}
		case 'C':
		case 'c':
		{
			val = PINC;
 4c6:	83 b3       	in	r24, 0x13	; 19

		}
		case 'D':
		case 'd':
		{
			val = PIND;
 4c8:	90 b3       	in	r25, 0x10	; 16
		default:
		break;
	}
	return val;
	
}
 4ca:	89 2f       	mov	r24, r25
 4cc:	08 95       	ret

000004ce <DIO_toggle_port>:
void DIO_toggle_port(unsigned char portname)
{
	switch(portname)
 4ce:	84 34       	cpi	r24, 0x44	; 68
 4d0:	f1 f0       	breq	.+60     	; 0x50e <DIO_toggle_port+0x40>
 4d2:	85 34       	cpi	r24, 0x45	; 69
 4d4:	38 f4       	brcc	.+14     	; 0x4e4 <DIO_toggle_port+0x16>
 4d6:	82 34       	cpi	r24, 0x42	; 66
 4d8:	a1 f0       	breq	.+40     	; 0x502 <DIO_toggle_port+0x34>
 4da:	83 34       	cpi	r24, 0x43	; 67
 4dc:	a8 f4       	brcc	.+42     	; 0x508 <DIO_toggle_port+0x3a>
 4de:	81 34       	cpi	r24, 0x41	; 65
 4e0:	c9 f4       	brne	.+50     	; 0x514 <DIO_toggle_port+0x46>
 4e2:	0c c0       	rjmp	.+24     	; 0x4fc <DIO_toggle_port+0x2e>
 4e4:	82 36       	cpi	r24, 0x62	; 98
 4e6:	69 f0       	breq	.+26     	; 0x502 <DIO_toggle_port+0x34>
 4e8:	83 36       	cpi	r24, 0x63	; 99
 4ea:	18 f4       	brcc	.+6      	; 0x4f2 <DIO_toggle_port+0x24>
 4ec:	81 36       	cpi	r24, 0x61	; 97
 4ee:	91 f4       	brne	.+36     	; 0x514 <DIO_toggle_port+0x46>
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <DIO_toggle_port+0x2e>
 4f2:	83 36       	cpi	r24, 0x63	; 99
 4f4:	49 f0       	breq	.+18     	; 0x508 <DIO_toggle_port+0x3a>
 4f6:	84 36       	cpi	r24, 0x64	; 100
 4f8:	69 f4       	brne	.+26     	; 0x514 <DIO_toggle_port+0x46>
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <DIO_toggle_port+0x40>
	{
		case 'A':
		case 'a':
		{
			PORTA ^= 0xFF;	//PORTA =~ PORTA;
 4fc:	8b b3       	in	r24, 0x1b	; 27
 4fe:	80 95       	com	r24
 500:	8b bb       	out	0x1b, r24	; 27
		}
		case 'B':
		case 'b':
		{
			PORTB ^= 0xFF;	//PORTB =~ PORTB;
 502:	88 b3       	in	r24, 0x18	; 24
 504:	80 95       	com	r24
 506:	88 bb       	out	0x18, r24	; 24
		}
		case 'C':
		case 'c':
		{
			PORTC ^= 0xFF;	//PORTC =~ PORTC;
 508:	85 b3       	in	r24, 0x15	; 21
 50a:	80 95       	com	r24
 50c:	85 bb       	out	0x15, r24	; 21
		}
		case 'D':
		case 'd':
		{
			PORTD ^= 0xFF;	//PORTD =~ PORTD;
 50e:	82 b3       	in	r24, 0x12	; 18
 510:	80 95       	com	r24
 512:	82 bb       	out	0x12, r24	; 18
 514:	08 95       	ret

00000516 <main>:
#include "DIO.h"
#define F_CPU8000000UL
#include <util/delay.h>
int main(void)
{
    DIO_vsetPINDir('A',0,1);
 516:	81 e4       	ldi	r24, 0x41	; 65
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 520:	81 e4       	ldi	r24, 0x41	; 65
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	while(1)
    {
        //TODO:: Please write your application code 
		DIO_vtogPIN('A',0);
 52a:	81 e4       	ldi	r24, 0x41	; 65
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_vtogPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 532:	8f e3       	ldi	r24, 0x3F	; 63
 534:	9d e0       	ldi	r25, 0x0D	; 13
 536:	a3 e0       	ldi	r26, 0x03	; 3
 538:	81 50       	subi	r24, 0x01	; 1
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	a0 40       	sbci	r26, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <main+0x22>
 540:	00 c0       	rjmp	.+0      	; 0x542 <main+0x2c>
 542:	00 00       	nop
		_delay_ms(1000);
		DIO_vtogPIN('A',3);
 544:	81 e4       	ldi	r24, 0x41	; 65
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_vtogPIN>
 54c:	8f e3       	ldi	r24, 0x3F	; 63
 54e:	9d e0       	ldi	r25, 0x0D	; 13
 550:	a3 e0       	ldi	r26, 0x03	; 3
 552:	81 50       	subi	r24, 0x01	; 1
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	a0 40       	sbci	r26, 0x00	; 0
 558:	e1 f7       	brne	.-8      	; 0x552 <main+0x3c>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <main+0x46>
 55c:	00 00       	nop
 55e:	e5 cf       	rjmp	.-54     	; 0x52a <main+0x14>

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
